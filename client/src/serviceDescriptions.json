[
    {
      "name": "users",
      "description": "Maintains the user database based on data from other topics and requests made directly to it",
      "envVars": [],
      "incoming": {
        "restAPI": {
          "pathPrefix": "/users",
          "endpoints": {
            "/register": [
              {
                "method": "POST",
                "type": "CLIENT",
                "handlingFunction": "handleRegister",
                "description": "Complete the registration of an account",
                "parameters": {
                  "userName": "The userName that the user wants to be associated with - unique across all users",
                  "email": "The users email to be validated",
                  "cellCountry": "The country code of the cell phone in ISO 3166 ALPHA-3",
                  "cell": "The mobile phone of the user to be validated",
                  "smsResults": "If the user wants results via SMS or not",
                  "emailNewsletter": "If the user wants newsletters via email or not",
                  "currencyCode": "ISO 4217 i.e. SEK",
                  "limitDepositWeekly": "The max deposit amount per week expressed as a whole integer in currencyCode",
                  "validateUsingCell": "True, we send a flash SMS. False, we send an email."
                }
              }
            ],
            "/checkUserName": [
              {
                "method": "GET",
                "type": "CLIENT",
                "handlingFunction": "handleCheckUserName",
                "description": "Check if a username is available or not in the registration form",
                "parameters": {
                  "userName": "The userName that the user wants to be associated with - unique across all users"
                }
              }
            ],
            "/logout": [
              {
                "method": "POST",
                "type": "CLIENT",
                "handlingFunction": "handleLogout",
                "description": "Client initiated logout"
              }
            ]
          }
        }
      },
      "outgoing": {},
      "services": {
        "shared": {
          "redis": {},
          "kafka": {
            "consumes": [
              "authenticate-bankid",
              "communication-email",
              "communication-sms",
              "selfexclusion-spelpaus",
              "users"
            ],
            "produces": [
              "communication-email",
              "communication-sms",
              "users"
            ]
          }
        },
        "local": {
          "sqllite": {
            "db": {
              "users": {
                "tables": [
                  "users"
                ]
              }
            }
          }
        }
      }
    },
    {
      "name": "selfexclusion-spelpaus",
      "description": "Checks a Swedish social security number (SSID) against the national registry Spelpaus",
      "envVars": [],
      "incoming": {
        "restAPI": {
          "pathPrefix": "/selfexclusion/spelpaus",
          "endpoints": {}
        }
      },
      "outgoing": {
        "spelpaus": {
          "description": "REST API as presented at https://testapi.spelpaus.se/Documentation"
        }
      },
      "services": {
        "shared": {
          "kafka": {
            "consumes": [
              "authenticate-bankid",
              "selfexclusion-spelpaus"
            ],
            "produces": [
              "selfexclusion-spelpaus"
            ]
          }
        },
        "local": {}
      }
    },
    {
      "name": "push-response",
      "description": "Listens to kafka topic pushresponses and forwards this to the nchan server",
      "envVars": [],
      "incoming": {
        "restAPI": {}
      },
      "outgoing": {},
      "services": {
        "shared": {
          "kafka": {
            "consumes": [
              "pushresponses"
            ],
            "produces": []
          }
        },
        "local": {}
      }
    },
    {
      "name": "gamelists",
      "description": "Based on content providers such as Opta we build lists of games per date in this service",
      "envVars": [],
      "incoming": {
        "restAPI": {
          "pathPrefix": "/gamelists",
          "endpoints": {
            "/": [
              {
                "method": "GET",
                "type": "ADMIN",
                "handlingFunction": "handleGetAll",
                "description": "Get all lists with their dates"
              },
              {
                "method": "POST",
                "type": "ADMIN",
                "handlingFunction": "handleCreate",
                "description": "Create a new list for a specific date",
                "parameters": {
                  "date": "Date for the new list",
                  "finalBetTime": "The specific time when we close for bets"
                }
              }
            ],
            "/:date": [
              {
                "method": "GET",
                "type": "ADMIN",
                "handlingFunction": "handleGetByDate",
                "description": "Get list for a specific date with its current slots"
              },
              {
                "method": "DELETE",
                "type": "ADMIN",
                "handlingFunction": "handleDeleteByDate",
                "description": "Deletes list for a specific date"
              }
            ],
            "/:date/:slot": [
              {
                "method": "PUT",
                "type": "ADMIN",
                "handlingFunction": "handleUpdateByDateSlot",
                "description": "Update a position in a specific list",
                "parameters": {
                  "gameProvider": "Provider for the game - currently only opta is supported",
                  "gameHash": "The hash for a specific event as provided by the provider service i.e. opta matches"
                }
              }
            ]
          }
        }
      },
      "outgoing": {},
      "services": {
        "shared": {
          "kafka": {
            "consumes": [
              "clientrequests",
              "gamelists",
              "gameprovider-updates"
            ],
            "produces": [
              "gamelists"
            ]
          }
        },
        "local": {
          "sqllite": {
            "db": {
              "gamelists": {
                "tables": [
                  "gamelists",
                  "slots"
                ]
              }
            }
          }
        }
      }
    },
    {
      "name": "external-opta",
      "description": "Opta provides the sport events information. This service accepts the push feed and queries the pull feed as needed.",
      "envVars": [],
      "incoming": {
        "restAPI": {
          "pathPrefix": "/opta",
          "endpoints": {
            "/": [
              {
                "method": "POST",
                "type": "EXTERNAL",
                "handlingFunction": "handleOpta",
                "description": "The Opta service of sport events and details pushes HTTP POST requests with a number of additional headers at certain intervals as well as live during games",
                "parameters": {}
              }
            ],
            "/sports": [
              {
                "method": "GET",
                "type": "ADMIN",
                "handlingFunction": "sportsGetAll",
                "description": "Get all known sports"
              }
            ],
            "/sports/:sportId": [
              {
                "method": "GET",
                "type": "ADMIN",
                "handlingFunction": "sportsGet",
                "description": "Get sport by id"
              }
            ],
            "/competitions/:sportId": [
              {
                "method": "GET",
                "type": "ADMIN",
                "handlingFunction": "competitionsGetAllBySport",
                "description": "Get all known competitions in a sport"
              }
            ],
            "/seasons/:sportId/:competitionId": [
              {
                "method": "GET",
                "type": "ADMIN",
                "handlingFunction": "seasonsGetAllBySportCompetition",
                "description": "Get all known seasons in a sport and competition"
              }
            ],
            "/teams/:sportId/:competitionId/:seasonId": [
              {
                "method": "GET",
                "type": "ADMIN",
                "handlingFunction": "teamsGetAllBySportCompetitionSeason",
                "description": "Get all known teams in a sport, competition and season"
              }
            ],
            "/matches/:sportId/:competitionId/:seasonId": [
              {
                "method": "GET",
                "type": "ADMIN",
                "handlingFunction": "matchesGetAllBySportCompetitionSeason",
                "description": "Get all known matches in a sport, competition and season"
              }
            ],
            "/matchesByDate/:date": [
              {
                "method": "GET",
                "type": "ADMIN",
                "handlingFunction": "matchesGetAllByDate",
                "description": "Get all known matches for a specific date"
              }
            ],
            "/events/:hash": [
              {
                "method": "GET",
                "type": "ADMIN",
                "handlingFunction": "eventsGetByHash",
                "description": "Get the full event details for the provided hash. Used internally by gamelists."
              }
            ]
          }
        }
      },
      "outgoing": {},
      "services": {
        "shared": {
          "kafka": {
            "consumes": [
              "external-opta"
            ],
            "produces": [
              "external-opta",
              "gameprovider-updates"
            ]
          }
        },
        "local": {
          "sqllite": {
            "db": {
              "external-opta": {
                "tables": [
                  "sports",
                  "competitions",
                  "seasons",
                  "teams",
                  "matches",
                  "previousMeetings",
                  "facts"
                ]
              }
            }
          }
        }
      }
    },
    {
      "name": "communication-sms",
      "description": "Whenever any part of the application requires an SMS to be sent this service will do that",
      "envVars": [],
      "incoming": {
        "restAPI": {
          "pathPrefix": "/communication-sms",
          "endpoints": {
            "/activate": [
              {
                "method": "POST",
                "type": "CLIENT",
                "handlingFunction": "handleSMSActivation",
                "description": "Activates an acccount via a token from SMS",
                "parameters": {
                  "token": "String containing pin"
                }
              }
            ]
          }
        }
      },
      "outgoing": {},
      "services": {
        "shared": {
          "kafka": {
            "consumes": [
              "communication-sms"
            ],
            "produces": [
              "communication-sms"
            ]
          }
        },
        "local": {
          "sqllite": {
            "db": {
              "communication-sms": {
                "tables": [
                  "tokens"
                ]
              }
            }
          }
        }
      }
    },
    {
      "name": "communication-email",
      "description": "Whenever any part of the application requires an email to be sent this service will do that",
      "envVars": [],
      "incoming": {
        "restAPI": {
          "pathPrefix": "/communication-email",
          "endpoints": {
            "/activate": [
              {
                "method": "POST",
                "type": "CLIENT",
                "handlingFunction": "handleEmailActivation",
                "description": "Activates an acccount via a emailed token",
                "parameters": {
                  "token": "String containing token"
                }
              }
            ]
          }
        }
      },
      "outgoing": {},
      "services": {
        "shared": {
          "kafka": {
            "consumes": [
              "communication-email"
            ],
            "produces": [
              "communication-email"
            ]
          }
        },
        "local": {
          "sqllite": {
            "db": {
              "communication-email": {
                "tables": [
                  "tokens"
                ]
              }
            }
          }
        }
      }
    },
    {
      "name": "client-messenger",
      "description": "Acts as backend to the nginx nchan service and deals with when someone subscribes or un-subscribes.",
      "envVars": [],
      "incoming": {
        "restAPI": {
          "pathPrefix": "/messenger",
          "endpoints": {
            "/sub": [
              {
                "method": "GET",
                "type": "EXTERNAL",
                "handlingFunction": "handleSubscribe",
                "description": "Called when someone subscribes to Nchan",
                "parameters": {}
              }
            ],
            "/unsub": [
              {
                "method": "GET",
                "type": "EXTERNAL",
                "handlingFunction": "handleUnSubscribe",
                "description": "Called when someone un-subscribes to Nchan",
                "parameters": {}
              }
            ],
            "/sub_auth": [
              {
                "method": "GET",
                "type": "EXTERNAL",
                "handlingFunction": "handleSubscribeAuth",
                "description": "Authenticate the subscription",
                "parameters": {}
              }
            ]
          }
        }
      },
      "outgoing": {},
      "services": {
        "shared": {
          "redis": {},
          "kafka": {
            "consumes": [],
            "produces": [
              "clientrequests"
            ]
          }
        },
        "local": {}
      }
    },
    {
      "name": "authenticate-bankid",
      "description": "Accepts a Swedish social security number (SSID) and interfaces with the BankID service",
      "envVars": [],
      "incoming": {
        "restAPI": {
          "pathPrefix": "/authenticate/bankid",
          "endpoints": {
            "/": [
              {
                "method": "POST",
                "type": "CLIENT",
                "handlingFunction": "handleAuthenticate",
                "description": "Checks the SSID and then starts an authentication",
                "parameters": {
                  "ssid": "string with Swedish social security number"
                }
              }
            ]
          }
        }
      },
      "outgoing": {
        "bankid": {
          "description": "Communication is done by https://github.com/anyfin/bankid"
        }
      },
      "services": {
        "shared": {
          "redis": {},
          "kafka": {
            "consumes": [
              "clientrequests",
              "authenticate-bankid"
            ],
            "produces": [
              "clientrequests",
              "authenticate-bankid"
            ]
          }
        },
        "local": {
          "sqllite": {
            "db": {
              "authenticate-bankid": {
                "tables": [
                  "authenticate-bankid"
                ]
              }
            }
          }
        }
      }
    }
  ]